#7485600278:AAFxrN6ZrkclJar_A3UYs8kf3SjLR5TPFP0


import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
import re

# Thay b·∫±ng token c·ªßa b·∫°n
BOT_TOKEN = "7485600278:AAFxrN6ZrkclJar_A3UYs8kf3SjLR5TPFP0"
bot = telebot.TeleBot(BOT_TOKEN)

# Danh s√°ch l∆∞u tr·ªØ giao d·ªãch (gi·∫£ l·∫≠p database)
transactions = []

# H√†m chuy·ªÉn ƒë·ªïi s·ªë ti·ªÅn t·ª´ chu·ªói
def parse_amount(text):
    text = text.lower().strip()
    text = text.lstrip("+")  # X√≥a k√Ω t·ª± +
    if "k" in text:
        return int(float(text.replace("k", "").replace(",", "").strip()) * 1000)
    elif "tr" in text:
        return int(float(text.replace("tr", "").replace(",", "").strip()) * 1000000)
    elif text.isdigit():
        return int(text)
    else:
        return None

# H√†m x·ª≠ l√Ω tin nh·∫Øn "Menu"
@bot.message_handler(commands=['start', 'menu'])
def send_menu(message):
    # T·∫°o menu d·∫°ng n√∫t b·∫•m
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("Th√™m giao d·ªãch"))
    markup.add(KeyboardButton("Xem th·ªëng k√™ th√°ng"))
    markup.add(KeyboardButton("Xem giao d·ªãch c·ª• th·ªÉ"))
    bot.reply_to(message, "üìã Menu ch√≠nh:\nCh·ªçn m·ªôt t√πy ch·ªçn b√™n d∆∞·ªõi:", reply_markup=markup)

# Th·ªëng k√™ t·ªïng income v√† expense theo th√°ng
def get_monthly_summary(month, year):
    total_income = 0
    total_expense = 0
    for transaction in transactions:
        trans_date = transaction["time"]
        if trans_date.month == month and trans_date.year == year:
            if transaction["type"] == "income":
                total_income += transaction["amount"]
            else:
                total_expense += transaction["amount"]
    return total_income, total_expense

# L·∫•y danh s√°ch giao d·ªãch theo ng√†y
def get_transactions_by_date(date):
    result = []
    for transaction in transactions:
        if transaction["time"].date() == date:
            result.append(transaction)
    return result

# X·ª≠ l√Ω c√°c t√πy ch·ªçn t·ª´ menu
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_message = message.text.strip()

    # N·∫øu ng∆∞·ªùi d√πng ch·ªçn "Th√™m giao d·ªãch"
    if user_message == "Th√™m giao d·ªãch":
        bot.reply_to(message, "Nh·∫≠p giao d·ªãch c·ªßa b·∫°n theo d·∫°ng: <s·ªë ti·ªÅn> <m√¥ t·∫£> ho·∫∑c <m√¥ t·∫£> <s·ªë ti·ªÅn>.")

    # N·∫øu ng∆∞·ªùi d√πng ch·ªçn "Xem th·ªëng k√™ th√°ng"
    elif user_message == "Xem th·ªëng k√™ th√°ng":
        now = datetime.now()
        total_income, total_expense = get_monthly_summary(now.month, now.year)
        bot.reply_to(
            message,
            f"üìä Th·ªëng k√™ th√°ng {now.month}/{now.year}:\n"
            f"üí∞ Thu nh·∫≠p: {total_income:,} VNƒê\n"
            f"üí∏ Chi ti√™u: {total_expense:,} VNƒê\n"
            f"üîÑ C√¢n ƒë·ªëi: {total_income - total_expense:,} VNƒê"
        )

    # N·∫øu ng∆∞·ªùi d√πng ch·ªçn "Xem giao d·ªãch c·ª• th·ªÉ"
    elif user_message == "Xem giao d·ªãch c·ª• th·ªÉ":
        bot.reply_to(message, "Nh·∫≠p ng√†y c·∫ßn xem giao d·ªãch (dd-mm-yyyy):")

    # N·∫øu ng∆∞·ªùi d√πng nh·∫≠p ng√†y
    elif re.match(r"\d{2}-\d{2}-\d{4}", user_message):
        try:
            date = datetime.strptime(user_message, "%d-%m-%Y").date()
            daily_transactions = get_transactions_by_date(date)
            if daily_transactions:
                response = f"üìÖ Giao d·ªãch ng√†y {date}:\n"
                for trans in daily_transactions:
                    response += f"- {trans['note']}: {trans['amount']:,} VNƒê ({trans['type']})\n"
            else:
                response = f"Kh√¥ng c√≥ giao d·ªãch n√†o v√†o ng√†y {date}."
            bot.reply_to(message, response)
        except ValueError:
            bot.reply_to(message, "Ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i (dd-mm-yyyy).")

    # N·∫øu nh·∫≠p giao d·ªãch m·ªõi
    else:
        # T√¨m s·ªë ti·ªÅn v√† ghi ch√∫
        match = re.search(r"([\+\-]?\d+(\.\d+)?(k|tr)?)|([\+\-]?\d+)", user_message)
        if match:
            amount_text = match.group(0)
            note = user_message.replace(amount_text, "").strip()
            amount = parse_amount(amount_text)
            if amount is not None:
                transaction_type = "income" if amount > 0 else "expense"
                # L∆∞u giao d·ªãch
                transactions.append({
                    "amount": abs(amount),
                    "type": transaction_type,
                    "note": note,
                    "time": datetime.now()
                })
                bot.reply_to(
                    message,
                    f"ƒê√£ l∆∞u: {abs(amount):,} VNƒê cho '{note}' ({transaction_type}) ‚úÖ"
                )
            else:
                bot.reply_to(message, "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
        else:
            bot.reply_to(message, "C√∫ ph√°p kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p d·∫°ng:\n<s·ªë ti·ªÅn> <m√¥ t·∫£> ho·∫∑c <m√¥ t·∫£> <s·ªë ti·ªÅn>.")

# Kh·ªüi ƒë·ªông bot
print("Bot ƒëang ch·∫°y...")
bot.polling()





import os
import threading
from time import sleep
from telebot import TeleBot

bot = TeleBot('7485600278:AAFxrN6ZrkclJar_A3UYs8kf3SjLR5TPFP0')

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "Welcome to my bot!")

def run_bot():
    bot.polling()

if __name__ == "__main__":
    # Kh·ªüi ch·∫°y bot trong thread ri√™ng
    threading.Thread(target=run_bot).start()

    # Nghe c·ªïng gi·∫£ ƒë·ªÉ Railway kh√¥ng b√°o l·ªói
    port = int(os.environ.get("PORT", 5000))
    while True:
        sleep(1)
